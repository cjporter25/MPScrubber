***Create a connection to a marketplace***
    - FIRST: Learn the in's and out's of Python's various scrapping libraries and methods.
        - (11.26.23): BeautifulSoup4 is a python library for pulling data out of HTML and 
          XML files. Useful elements of this Python Library can be found in the "BeautifulSoup"
          section of the development log.


***Decipher the trailing "exact=true or exact=false"***
    - At first, it isn't clear what exactly it's for.
    - Testing (11.20.23): Used the parameters of $0 to $20000 for Toyota vehicles and
      manually changed the parameter in the URL to both true and false.
        - The resulting output didn't vary at all between the two. For now, it will
          largely be ignored unless necessary in the future.

***Filter Constants aren't all showing up correctly***
    - (11.26.23): The SORTING_FILTERS isn't able to recognize the input "key" when
      running the first test run. Unsure at this time why it can't,
      (UPDATE): Just kidding, the "F" shouldn't be capitalized in "First". Changing
      the sorting filter so it is capitalized

***Facebook Marketplace URL Schema changes depending on whether you're logged in***
    - If logged in, the user is limited to only a few filtering options on the left side 
      bar. As a replacement, there is a new top bar that allows for new filtering to occur.
      For this app to work optimally, I recommended logging out of the browser in use to maintain
      anominity.

***EDGE CASES POST (1st) Successful pull***
    - (1.4.24) When the program runs it will properly close chrome if it is open, but doesn't properly 
      handle the case where chrome isn't yet opened. So, the logic should "check" first, and if so,
      then close, otherwise it shouldn't try anything. The second edge case occurs when the data is
      being pulled and the loop runs out of items to check, i.e., it returns nothing. The code should
      account for this instance and close the loop if it happens. 
    - The output seems to be dependent on how many postings load by default when a page opens (~24)
    - SUDDEN THIRD: The mileage/location are incorrectly assuming the same HTML tag. Need to look at 
      developer tools again to see what it has to change to.

***PRE-CHECKING DATABASE FOR ENTRIES ALREADY PRESENT****
    - (1.15.24) The program currently functions as a means to retrieve and store data from the
      facebook marketplace, however, there is no means by which the program won't add something
      if it's already present. The next major hurdle is to implement a function that checks whether
      a posting has already been added to the database.

***SEPARATION OF CONCERNS***
    - (6.19.24) The program currently has a python class (facebookMP) that was doing too much and should
      be split into it's two distinct functions - scraping the facebook page & communicating with the DB.

***GUI RESPONSE ACTIVATES SCRAPPING***
    - (6.26.24) The program is currently hard coded for most of the variables necessary to actual have
      the scraping run. This was on purpose to ensure the functional side works as intended. Since I amount
      now in the feature realm, I can focus on having a GUI that a user can interact with that will tailor 
      what is scrapped and what is reported. The goal is to have a variety of input spaces and checkboxes
      that will be parsed and saved to a dictionary object that the project code will interpret to run the 
      scrapping process.


    